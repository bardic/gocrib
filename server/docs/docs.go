// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account/{accountId}": {
            "post": {
                "description": "Login route for account - takes an account id and returns the account details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{accountId}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Create new match with accountId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Get match by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Match ID",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.Match"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/cut/{cutId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Cut deck by index of card selected",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "cut id",
                        "name": "cutIndex",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/deck": {
            "get": {
                "description": "Returns vo.Match object when given a matchId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Get decks by matchDd",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Match ID",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.Deck"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/join/{accountId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Join match by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.Match"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/play": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Update the state of several cards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "cut id",
                        "name": "cutIndex",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/state": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Get state by matchId",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Match ID",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/queries.Match"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/open": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Get list of open matches",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/vo.Match"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "pgtype.InfinityModifier": {
            "type": "integer",
            "enum": [
                1,
                0,
                -1
            ],
            "x-enum-varnames": [
                "Infinity",
                "Finite",
                "NegativeInfinity"
            ]
        },
        "pgtype.Timestamptz": {
            "type": "object",
            "properties": {
                "infinityModifier": {
                    "$ref": "#/definitions/pgtype.InfinityModifier"
                },
                "time": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "queries.Gamestate": {
            "type": "string",
            "enum": [
                "New",
                "Waiting",
                "Ready",
                "Determine",
                "Deal",
                "Discard",
                "Cut",
                "Play",
                "PassTurn",
                "Count",
                "Kitty",
                "Won",
                "Lost"
            ],
            "x-enum-varnames": [
                "GamestateNew",
                "GamestateWaiting",
                "GamestateReady",
                "GamestateDetermine",
                "GamestateDeal",
                "GamestateDiscard",
                "GamestateCut",
                "GamestatePlay",
                "GamestatePassTurn",
                "GamestateCount",
                "GamestateKitty",
                "GamestateWon",
                "GamestateLost"
            ]
        },
        "queries.Match": {
            "type": "object",
            "properties": {
                "art": {
                    "type": "string"
                },
                "creationdate": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "currentplayerturn": {
                    "type": "integer"
                },
                "cutgamecardid": {
                    "type": "integer"
                },
                "dealerid": {
                    "type": "integer"
                },
                "elorangemax": {
                    "type": "integer"
                },
                "elorangemin": {
                    "type": "integer"
                },
                "gamestate": {
                    "$ref": "#/definitions/queries.Gamestate"
                },
                "id": {
                    "type": "integer"
                },
                "privatematch": {
                    "type": "boolean"
                },
                "turnpasstimestamps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pgtype.Timestamptz"
                    }
                }
            }
        },
        "vo.Account": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "vo.Card": {
            "type": "object",
            "properties": {
                "art": {
                    "type": "string"
                },
                "cardid": {
                    "type": "integer"
                },
                "currowner": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "origowner": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "suit": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "vo.Deck": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vo.Card"
                    }
                },
                "cutmatchcardid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "matchid": {
                    "type": "integer"
                }
            }
        },
        "vo.Match": {
            "type": "object",
            "properties": {
                "art": {
                    "type": "string"
                },
                "creationdate": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "currentplayerturn": {
                    "type": "integer"
                },
                "cutgamecardid": {
                    "type": "integer"
                },
                "dealerid": {
                    "type": "integer"
                },
                "elorangemax": {
                    "type": "integer"
                },
                "elorangemin": {
                    "type": "integer"
                },
                "gamestate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vo.Player"
                    }
                },
                "privatematch": {
                    "type": "boolean"
                },
                "turnpasstimestamps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pgtype.Timestamptz"
                    }
                }
            }
        },
        "vo.Player": {
            "type": "object",
            "properties": {
                "accountid": {
                    "type": "integer"
                },
                "art": {
                    "type": "string"
                },
                "hand": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vo.Card"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "isready": {
                    "type": "boolean"
                },
                "kitty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vo.Card"
                    }
                },
                "play": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vo.Card"
                    }
                },
                "score": {
                    "type": "integer"
                },
                "turnOrder": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.4",
	Host:             "localhost:1323",
	BasePath:         "/v2",
	Schemes:          []string{},
	Title:            "cribbage server",
	Description:      "cribbage rest server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
