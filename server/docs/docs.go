// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/account/login/": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "id to login with",
                        "name": "details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/queries.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/player/ready": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "players"
                ],
                "summary": "Update player by id to be ready. Returns true if all players are ready",
                "parameters": [
                    {
                        "description": "player id to update",
                        "name": "pReady",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vo.PlayerReady"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{accountId}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Create new match",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Get match by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Match ID",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/queries.Match"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/cards": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Get match card by match id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/queries.GetMatchCardsRow"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/currentPlayer/{playerId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Update the matches current palyer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "playerId id",
                        "name": "playerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/cut/{cutId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Cut deck by index of card selected",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "cut id",
                        "name": "cutIndex",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/deal": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Join match by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.MatchDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/deck/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deck"
                ],
                "summary": "Get deck by match id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "search for deck by match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.GameDeck"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/deck/kitty": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "GetKitty",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.Hand"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/deck/shuffle": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deck"
                ],
                "summary": "PutSHuffle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.Hand"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/determinefirst/": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Join match by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.MatchDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/join/{accountId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Join match by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.MatchDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/pass": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Join match by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.MatchDetailsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/player/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "players"
                ],
                "summary": "Get player by barcode",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "search for match by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "search for match by id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.GamePlayer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/player/{playerId}/deck/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "deck"
                ],
                "summary": "Get deck by match id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "search for deck by match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "search for deck by player id",
                        "name": "playerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/vo.GameDeck"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/player/{playerId}/kitty": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Update kitty with ids",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "player id",
                        "name": "playerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "array of ids to add to kitty",
                        "name": "details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vo.HandModifier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/queries.Match"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/match/{matchId}/player/{playerId}/play": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Update play",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "match id",
                        "name": "matchId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "player id",
                        "name": "playerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "HandModifier object",
                        "name": "details",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vo.HandModifier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/queries.Match"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/open": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "match"
                ],
                "summary": "Get match by id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/vo.GameMatch"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "pgtype.InfinityModifier": {
            "type": "integer",
            "enum": [
                1,
                0,
                -1
            ],
            "x-enum-varnames": [
                "Infinity",
                "Finite",
                "NegativeInfinity"
            ]
        },
        "pgtype.Text": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "pgtype.Timestamptz": {
            "type": "object",
            "properties": {
                "infinityModifier": {
                    "$ref": "#/definitions/pgtype.InfinityModifier"
                },
                "time": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "queries.Account": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "queries.Cardstate": {
            "type": "string",
            "enum": [
                "Deck",
                "Hand",
                "Play",
                "Kitty"
            ],
            "x-enum-varnames": [
                "CardstateDeck",
                "CardstateHand",
                "CardstatePlay",
                "CardstateKitty"
            ]
        },
        "queries.Cardsuit": {
            "type": "string",
            "enum": [
                "Spades",
                "Clubs",
                "Hearts",
                "Diamonds"
            ],
            "x-enum-varnames": [
                "CardsuitSpades",
                "CardsuitClubs",
                "CardsuitHearts",
                "CardsuitDiamonds"
            ]
        },
        "queries.Cardvalue": {
            "type": "string",
            "enum": [
                "Ace",
                "Two",
                "Three",
                "Four",
                "Five",
                "Six",
                "Seven",
                "Eight",
                "Nine",
                "Ten",
                "Jack",
                "Queen",
                "King",
                "Joker"
            ],
            "x-enum-varnames": [
                "CardvalueAce",
                "CardvalueTwo",
                "CardvalueThree",
                "CardvalueFour",
                "CardvalueFive",
                "CardvalueSix",
                "CardvalueSeven",
                "CardvalueEight",
                "CardvalueNine",
                "CardvalueTen",
                "CardvalueJack",
                "CardvalueQueen",
                "CardvalueKing",
                "CardvalueJoker"
            ]
        },
        "queries.Gamestate": {
            "type": "string",
            "enum": [
                "New",
                "Waiting",
                "Ready",
                "Determine",
                "Deal",
                "Discard",
                "Cut",
                "Play",
                "PassTurn",
                "Count",
                "Kitty",
                "Won",
                "Lost"
            ],
            "x-enum-varnames": [
                "GamestateNew",
                "GamestateWaiting",
                "GamestateReady",
                "GamestateDetermine",
                "GamestateDeal",
                "GamestateDiscard",
                "GamestateCut",
                "GamestatePlay",
                "GamestatePassTurn",
                "GamestateCount",
                "GamestateKitty",
                "GamestateWon",
                "GamestateLost"
            ]
        },
        "queries.GetMatchCardsRow": {
            "type": "object",
            "properties": {
                "art": {
                    "$ref": "#/definitions/pgtype.Text"
                },
                "cardid": {
                    "type": "integer"
                },
                "currowner": {
                    "type": "integer"
                },
                "cutmatchcardid": {
                    "type": "integer"
                },
                "deckid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "id_2": {
                    "type": "integer"
                },
                "id_3": {
                    "type": "integer"
                },
                "matchcardid": {
                    "type": "integer"
                },
                "origowner": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/queries.NullCardstate"
                },
                "suit": {
                    "$ref": "#/definitions/queries.NullCardsuit"
                },
                "value": {
                    "$ref": "#/definitions/queries.NullCardvalue"
                }
            }
        },
        "queries.Match": {
            "type": "object",
            "properties": {
                "art": {
                    "type": "string"
                },
                "creationdate": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "currentplayerturn": {
                    "type": "integer"
                },
                "cutgamecardid": {
                    "type": "integer"
                },
                "dealerid": {
                    "type": "integer"
                },
                "deckid": {
                    "type": "integer"
                },
                "elorangemax": {
                    "type": "integer"
                },
                "elorangemin": {
                    "type": "integer"
                },
                "gamestate": {
                    "$ref": "#/definitions/queries.Gamestate"
                },
                "id": {
                    "type": "integer"
                },
                "privatematch": {
                    "type": "boolean"
                },
                "turnpasstimestamps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pgtype.Timestamptz"
                    }
                }
            }
        },
        "queries.Matchcard": {
            "type": "object",
            "properties": {
                "cardid": {
                    "type": "integer"
                },
                "currowner": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "origowner": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/queries.Cardstate"
                }
            }
        },
        "queries.NullCardstate": {
            "type": "object",
            "properties": {
                "cardstate": {
                    "$ref": "#/definitions/queries.Cardstate"
                },
                "valid": {
                    "description": "Valid is true if Cardstate is not NULL",
                    "type": "boolean"
                }
            }
        },
        "queries.NullCardsuit": {
            "type": "object",
            "properties": {
                "cardsuit": {
                    "$ref": "#/definitions/queries.Cardsuit"
                },
                "valid": {
                    "description": "Valid is true if Cardsuit is not NULL",
                    "type": "boolean"
                }
            }
        },
        "queries.NullCardvalue": {
            "type": "object",
            "properties": {
                "cardvalue": {
                    "$ref": "#/definitions/queries.Cardvalue"
                },
                "valid": {
                    "description": "Valid is true if Cardvalue is not NULL",
                    "type": "boolean"
                }
            }
        },
        "vo.GameCard": {
            "type": "object",
            "properties": {
                "art": {
                    "type": "string"
                },
                "cardid": {
                    "type": "integer"
                },
                "currowner": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "origowner": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/queries.Cardstate"
                },
                "suit": {
                    "$ref": "#/definitions/queries.Cardsuit"
                },
                "value": {
                    "$ref": "#/definitions/queries.Cardvalue"
                }
            }
        },
        "vo.GameDeck": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vo.GameCard"
                    }
                },
                "cutmatchcardid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "vo.GameMatch": {
            "type": "object",
            "properties": {
                "art": {
                    "type": "string"
                },
                "creationdate": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "currentplayerturn": {
                    "type": "integer"
                },
                "cutgamecardid": {
                    "type": "integer"
                },
                "dealerid": {
                    "type": "integer"
                },
                "deckid": {
                    "type": "integer"
                },
                "elorangemax": {
                    "type": "integer"
                },
                "elorangemin": {
                    "type": "integer"
                },
                "gamestate": {
                    "$ref": "#/definitions/queries.Gamestate"
                },
                "id": {
                    "type": "integer"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/vo.GamePlayer"
                    }
                },
                "privatematch": {
                    "type": "boolean"
                },
                "turnpasstimestamps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pgtype.Timestamptz"
                    }
                }
            }
        },
        "vo.GamePlayer": {
            "type": "object",
            "properties": {
                "accountid": {
                    "type": "integer"
                },
                "art": {
                    "type": "string"
                },
                "hand": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/queries.Matchcard"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "isready": {
                    "type": "boolean"
                },
                "kitty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/queries.Matchcard"
                    }
                },
                "play": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/queries.Matchcard"
                    }
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "vo.Hand": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/queries.Matchcard"
                    }
                }
            }
        },
        "vo.HandModifier": {
            "type": "object",
            "properties": {
                "cardIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "senderId": {
                    "type": "integer"
                }
            }
        },
        "vo.MatchDetailsResponse": {
            "type": "object",
            "properties": {
                "gameState": {
                    "$ref": "#/definitions/queries.Gamestate"
                },
                "matchId": {
                    "type": "integer"
                },
                "playerId": {
                    "type": "integer"
                }
            }
        },
        "vo.PlayerReady": {
            "type": "object",
            "properties": {
                "matchId": {
                    "description": "MatchId",
                    "type": "integer"
                },
                "playerId": {
                    "description": "PlayerId",
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.4",
	Host:             "localhost:1323",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "cribbage server",
	Description:      "cribbage rest server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
