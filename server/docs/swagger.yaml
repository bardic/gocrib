basePath: /v2
definitions:
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Timestamptz:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        type: string
      valid:
        type: boolean
    type: object
  queries.Gamestate:
    enum:
    - New
    - Waiting
    - Ready
    - Determine
    - Deal
    - Discard
    - Cut
    - Play
    - PassTurn
    - Count
    - Kitty
    - Won
    - Lost
    type: string
    x-enum-varnames:
    - GamestateNew
    - GamestateWaiting
    - GamestateReady
    - GamestateDetermine
    - GamestateDeal
    - GamestateDiscard
    - GamestateCut
    - GamestatePlay
    - GamestatePassTurn
    - GamestateCount
    - GamestateKitty
    - GamestateWon
    - GamestateLost
  queries.Match:
    properties:
      art:
        type: string
      creationdate:
        $ref: '#/definitions/pgtype.Timestamptz'
      currentplayerturn:
        type: integer
      cutgamecardid:
        type: integer
      dealerid:
        type: integer
      elorangemax:
        type: integer
      elorangemin:
        type: integer
      gamestate:
        $ref: '#/definitions/queries.Gamestate'
      id:
        type: integer
      privatematch:
        type: boolean
      turnpasstimestamps:
        items:
          $ref: '#/definitions/pgtype.Timestamptz'
        type: array
    type: object
  vo.Account:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  vo.Card:
    properties:
      art:
        type: string
      cardid:
        type: integer
      currowner:
        type: integer
      id:
        type: integer
      name:
        type: string
      origowner:
        type: integer
      rank:
        type: integer
      state:
        type: string
      suit:
        type: string
      value:
        type: integer
    type: object
  vo.Deck:
    properties:
      cards:
        items:
          $ref: '#/definitions/vo.Card'
        type: array
      cutmatchcardid:
        type: integer
      id:
        type: integer
      matchid:
        type: integer
    type: object
  vo.Match:
    properties:
      art:
        type: string
      creationdate:
        $ref: '#/definitions/pgtype.Timestamptz'
      currentplayerturn:
        type: integer
      cutgamecardid:
        type: integer
      dealerid:
        type: integer
      elorangemax:
        type: integer
      elorangemin:
        type: integer
      gamestate:
        type: string
      id:
        type: integer
      players:
        items:
          $ref: '#/definitions/vo.Player'
        type: array
      privatematch:
        type: boolean
      turnpasstimestamps:
        items:
          $ref: '#/definitions/pgtype.Timestamptz'
        type: array
    type: object
  vo.Player:
    properties:
      accountid:
        type: integer
      art:
        type: string
      hand:
        items:
          $ref: '#/definitions/vo.Card'
        type: array
      id:
        type: integer
      isready:
        type: boolean
      kitty:
        items:
          $ref: '#/definitions/vo.Card'
        type: array
      play:
        items:
          $ref: '#/definitions/vo.Card'
        type: array
      score:
        type: integer
      turnOrder:
        type: integer
    type: object
host: localhost:1323
info:
  contact: {}
  description: cribbage rest server
  title: cribbage server
  version: 0.0.4
paths:
  /account/{accountId}:
    post:
      consumes:
      - application/json
      description: Login route for account - takes an account id and returns the account
        details
      parameters:
      - description: account id
        in: path
        name: accountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.Account'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      tags:
      - account
  /match/{accountId}:
    post:
      consumes:
      - application/json
      parameters:
      - description: account id
        in: path
        name: accountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create new match with accountId
      tags:
      - match
  /match/{matchId}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Match ID
        in: path
        name: matchId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.Match'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get match by id
      tags:
      - match
  /match/{matchId}/cut/{cutId}:
    put:
      consumes:
      - application/json
      parameters:
      - description: match id
        in: path
        name: matchId
        required: true
        type: integer
      - description: cut id
        in: path
        name: cutIndex
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Cut deck by index of card selected
      tags:
      - match
  /match/{matchId}/deck:
    get:
      consumes:
      - application/json
      description: Returns vo.Match object when given a matchId
      parameters:
      - description: Match ID
        in: path
        name: matchId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.Deck'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get decks by matchDd
      tags:
      - match
  /match/{matchId}/join/{accountId}:
    put:
      consumes:
      - application/json
      parameters:
      - description: match id
        in: path
        name: matchId
        required: true
        type: integer
      - description: account id
        in: path
        name: accountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/vo.Match'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Join match by id
      tags:
      - match
  /match/{matchId}/play:
    put:
      consumes:
      - application/json
      parameters:
      - description: match id
        in: path
        name: matchId
        required: true
        type: integer
      - description: cut id
        in: path
        name: cutIndex
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update the state of several cards
      tags:
      - match
  /match/{matchId}/state:
    get:
      consumes:
      - application/json
      parameters:
      - description: Match ID
        in: path
        name: matchId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/queries.Match'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get state by matchId
      tags:
      - match
  /open:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/vo.Match'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get list of open matches
      tags:
      - match
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
