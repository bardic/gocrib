// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Cardsuit string

const (
	CardsuitSpades   Cardsuit = "Spades"
	CardsuitClubs    Cardsuit = "Clubs"
	CardsuitHearts   Cardsuit = "Hearts"
	CardsuitDiamonds Cardsuit = "Diamonds"
)

func (e *Cardsuit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Cardsuit(s)
	case string:
		*e = Cardsuit(s)
	default:
		return fmt.Errorf("unsupported scan type for Cardsuit: %T", src)
	}
	return nil
}

type NullCardsuit struct {
	Cardsuit Cardsuit
	Valid    bool // Valid is true if Cardsuit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardsuit) Scan(value interface{}) error {
	if value == nil {
		ns.Cardsuit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Cardsuit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardsuit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Cardsuit), nil
}

type Cardvalue string

const (
	CardvalueAce   Cardvalue = "Ace"
	CardvalueTwo   Cardvalue = "Two"
	CardvalueThree Cardvalue = "Three"
	CardvalueFour  Cardvalue = "Four"
	CardvalueFive  Cardvalue = "Five"
	CardvalueSix   Cardvalue = "Six"
	CardvalueSeven Cardvalue = "Seven"
	CardvalueEight Cardvalue = "Eight"
	CardvalueNine  Cardvalue = "Nine"
	CardvalueTen   Cardvalue = "Ten"
	CardvalueJack  Cardvalue = "Jack"
	CardvalueQueen Cardvalue = "Queen"
	CardvalueKing  Cardvalue = "King"
	CardvalueJoker Cardvalue = "Joker"
)

func (e *Cardvalue) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Cardvalue(s)
	case string:
		*e = Cardvalue(s)
	default:
		return fmt.Errorf("unsupported scan type for Cardvalue: %T", src)
	}
	return nil
}

type NullCardvalue struct {
	Cardvalue Cardvalue
	Valid     bool // Valid is true if Cardvalue is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCardvalue) Scan(value interface{}) error {
	if value == nil {
		ns.Cardvalue, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Cardvalue.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCardvalue) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Cardvalue), nil
}

type Account struct {
	ID   int
	Name string
}

type Card struct {
	ID    int
	Value Cardvalue
	Suit  Cardsuit
	Art   string
}

type Deck struct {
	ID             int
	Cutmatchcardid int
	Matchid        int
}

type Match struct {
	ID                 int
	Creationdate       pgtype.Timestamptz
	Privatematch       bool
	Elorangemin        int
	Elorangemax        int
	Cutgamecardid      int
	Dealerid           int
	Currentplayerturn  int
	Turnpasstimestamps []pgtype.Timestamptz
	Gamestate          string
	Art                string
}

type MatchPlayer struct {
	Matchid   int
	Playerid  int
	Turnorder int
}

type Matchcard struct {
	ID        int
	Cardid    int
	Origowner int
	Currowner int
	State     string
	Deckid    int
}

type Player struct {
	ID        int
	Accountid int
	Score     int
	Isready   bool
	Art       string
}
